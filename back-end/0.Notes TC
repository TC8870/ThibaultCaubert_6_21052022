Notes TC
Pour démarrer 
    > nodemon : "Set-ExecutionPolicy RemoteSigned -Scope CurrentUser" (pour lancer le server nodemon dans le back end) puis "nodemon server"
    > npm run start

Actions : 
    > problème avec ENV, voir pour réinstaller

    > Sanitizer sur les 2 modèles ??

    // Plugin pour Mongoose qui purifie les champs du model avant de les enregistrer dans la base MongoDB.
    // Utilise le HTML Sanitizer de Google Caja pour effectuer la désinfection.
    sauceSchema.plugin(sanitizerPlugin);
    const sanitizerPlugin = require('mongoose-sanitizer-plugin');

    //cas si sauce unique ? validator ?


Réalisé :
    > Créer le projet vide
    > Installer node sur le front end (npm install)
    > Initialiser le projet sur le back end (npm init)
    > Créer le fichier server.js
    > Installer nodemon pour la visualisation des réponses serveurs en temps réel sans relancer node server à chaque fois
    > Installer Express (npm install express --save)
    > Créer le fichier app.js
    > Installer Mongoose (npm install mongoose)
    > Connecter à la base MongoDB - utilisateur 123 (mdp:123)
    > Créer un modèle sauce via mongoose
    > Créer la route POST avec le modèle mongoose pour alimenter la base
    > Créer la route GET pour récupérer toutes les données de la base
    > Créer la route GET ONE pour récupérer une donnée de la base
    > Créer la route PUT pour modifier une donnée de la base => problème de test (erreur 500)
    > Créer la route DELETE pour supprimer une donnée de la base => problème de test (erreur 500)
    > Créer le dossier Models + fichier M_Sauce et créer un modèle de sauce 
    > Créer le dossier Controllers + fichier C_Sauces et y déplacer les Controllers
    > Créer le dossier Routes + fichier R_Sauces et y déplacer les routes + intégrer le routeur 
    > Créer le modèle User
    > Installer le package (npm install --save mongoose-unique-validator)
    > Créer la route User
    > Installer le module de cryptage (npm install --save bcrypt)
    > Créer le controller Signup
    > Créer le controller Login
    > Installer jsonwebtoken (npm install --save jsonwebtoken)
    > Créer le token dans le login
    > Créer le middleware d'authentification
    > Appliquer le middleware d'authentification aux routes Sauce GET/POST/PUT/DELETE
    > Installer Multer (npm install --save multer)
    > Créer le fichier de configuration de multer (multer-config.js)
    > Modifier la route POST avec multer
    > Modifer la route PUT avec multer
    > Supprimer l'image du dossier lors d'un DELETE
    > Installer dotenv (npm i express dotenv )
    > Installer body-parser (npm install body-parser --save)
    > Corriger les fichiers js


Tests :
User : 
{    
    "email" : "TC@test.fr",
    "password" : "TC"
}
Sauce :sous form et non JSON
 {
    "userId" : "id",
    "name" : "Sauce qui pique",
    "manufacturer" : "Fabricant sympathique",
    "description" : "Sauce agréable",
    "mainPepper" : "Poivre",
    "imageUrl" : "https://www.papillesetpupilles.fr/wp-content/uploads/2020/06/Sauce-au-poivre-5-baies.jpg",
    "heat" : 5,
    "likes" : 0,
    "dislikes" : 0,
    "usersLiked" : [],
    "usersDisliked" : []
 }
